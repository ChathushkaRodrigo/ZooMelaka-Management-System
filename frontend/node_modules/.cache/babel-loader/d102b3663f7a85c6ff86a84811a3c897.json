{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Trie = exports.createTrieFromBase64 = exports.UTRIE2_INDEX_2_MASK = exports.UTRIE2_INDEX_2_BLOCK_LENGTH = exports.UTRIE2_OMITTED_BMP_INDEX_1_LENGTH = exports.UTRIE2_INDEX_1_OFFSET = exports.UTRIE2_UTF8_2B_INDEX_2_LENGTH = exports.UTRIE2_UTF8_2B_INDEX_2_OFFSET = exports.UTRIE2_INDEX_2_BMP_LENGTH = exports.UTRIE2_LSCP_INDEX_2_LENGTH = exports.UTRIE2_DATA_MASK = exports.UTRIE2_DATA_BLOCK_LENGTH = exports.UTRIE2_LSCP_INDEX_2_OFFSET = exports.UTRIE2_SHIFT_1_2 = exports.UTRIE2_INDEX_SHIFT = exports.UTRIE2_SHIFT_1 = exports.UTRIE2_SHIFT_2 = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Util = require('./Util');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/** Shift size for getting the index-2 table offset. */\n\n\nvar UTRIE2_SHIFT_2 = exports.UTRIE2_SHIFT_2 = 5;\n/** Shift size for getting the index-1 table offset. */\n\nvar UTRIE2_SHIFT_1 = exports.UTRIE2_SHIFT_1 = 6 + 5;\n/**\n * Shift size for shifting left the index array values.\n * Increases possible data size with 16-bit index values at the cost\n * of compactability.\n * This requires data blocks to be aligned by UTRIE2_DATA_GRANULARITY.\n */\n\nvar UTRIE2_INDEX_SHIFT = exports.UTRIE2_INDEX_SHIFT = 2;\n/**\n * Difference between the two shift sizes,\n * for getting an index-1 offset from an index-2 offset. 6=11-5\n */\n\nvar UTRIE2_SHIFT_1_2 = exports.UTRIE2_SHIFT_1_2 = UTRIE2_SHIFT_1 - UTRIE2_SHIFT_2;\n/**\n * The part of the index-2 table for U+D800..U+DBFF stores values for\n * lead surrogate code _units_ not code _points_.\n * Values for lead surrogate code _points_ are indexed with this portion of the table.\n * Length=32=0x20=0x400>>UTRIE2_SHIFT_2. (There are 1024=0x400 lead surrogates.)\n */\n\nvar UTRIE2_LSCP_INDEX_2_OFFSET = exports.UTRIE2_LSCP_INDEX_2_OFFSET = 0x10000 >> UTRIE2_SHIFT_2;\n/** Number of entries in a data block. 32=0x20 */\n\nvar UTRIE2_DATA_BLOCK_LENGTH = exports.UTRIE2_DATA_BLOCK_LENGTH = 1 << UTRIE2_SHIFT_2;\n/** Mask for getting the lower bits for the in-data-block offset. */\n\nvar UTRIE2_DATA_MASK = exports.UTRIE2_DATA_MASK = UTRIE2_DATA_BLOCK_LENGTH - 1;\nvar UTRIE2_LSCP_INDEX_2_LENGTH = exports.UTRIE2_LSCP_INDEX_2_LENGTH = 0x400 >> UTRIE2_SHIFT_2;\n/** Count the lengths of both BMP pieces. 2080=0x820 */\n\nvar UTRIE2_INDEX_2_BMP_LENGTH = exports.UTRIE2_INDEX_2_BMP_LENGTH = UTRIE2_LSCP_INDEX_2_OFFSET + UTRIE2_LSCP_INDEX_2_LENGTH;\n/**\n * The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n * Length 32=0x20 for lead bytes C0..DF, regardless of UTRIE2_SHIFT_2.\n */\n\nvar UTRIE2_UTF8_2B_INDEX_2_OFFSET = exports.UTRIE2_UTF8_2B_INDEX_2_OFFSET = UTRIE2_INDEX_2_BMP_LENGTH;\nvar UTRIE2_UTF8_2B_INDEX_2_LENGTH = exports.UTRIE2_UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6;\n/* U+0800 is the first code point after 2-byte UTF-8 */\n\n/**\n * The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n * Variable length, for code points up to highStart, where the last single-value range starts.\n * Maximum length 512=0x200=0x100000>>UTRIE2_SHIFT_1.\n * (For 0x100000 supplementary code points U+10000..U+10ffff.)\n *\n * The part of the index-2 table for supplementary code points starts\n * after this index-1 table.\n *\n * Both the index-1 table and the following part of the index-2 table\n * are omitted completely if there is only BMP data.\n */\n\nvar UTRIE2_INDEX_1_OFFSET = exports.UTRIE2_INDEX_1_OFFSET = UTRIE2_UTF8_2B_INDEX_2_OFFSET + UTRIE2_UTF8_2B_INDEX_2_LENGTH;\n/**\n * Number of index-1 entries for the BMP. 32=0x20\n * This part of the index-1 table is omitted from the serialized form.\n */\n\nvar UTRIE2_OMITTED_BMP_INDEX_1_LENGTH = exports.UTRIE2_OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> UTRIE2_SHIFT_1;\n/** Number of entries in an index-2 block. 64=0x40 */\n\nvar UTRIE2_INDEX_2_BLOCK_LENGTH = exports.UTRIE2_INDEX_2_BLOCK_LENGTH = 1 << UTRIE2_SHIFT_1_2;\n/** Mask for getting the lower bits for the in-index-2-block offset. */\n\nvar UTRIE2_INDEX_2_MASK = exports.UTRIE2_INDEX_2_MASK = UTRIE2_INDEX_2_BLOCK_LENGTH - 1;\n\nvar createTrieFromBase64 = exports.createTrieFromBase64 = function createTrieFromBase64(base64) {\n  var buffer = (0, _Util.decode)(base64);\n  var view32 = Array.isArray(buffer) ? (0, _Util.polyUint32Array)(buffer) : new Uint32Array(buffer);\n  var view16 = Array.isArray(buffer) ? (0, _Util.polyUint16Array)(buffer) : new Uint16Array(buffer);\n  var headerLength = 24;\n  var index = view16.slice(headerLength / 2, view32[4] / 2);\n  var data = view32[5] === 2 ? view16.slice((headerLength + view32[4]) / 2) : view32.slice(Math.ceil((headerLength + view32[4]) / 4));\n  return new Trie(view32[0], view32[1], view32[2], view32[3], index, data);\n};\n\nvar Trie = exports.Trie = function () {\n  function Trie(initialValue, errorValue, highStart, highValueIndex, index, data) {\n    _classCallCheck(this, Trie);\n\n    this.initialValue = initialValue;\n    this.errorValue = errorValue;\n    this.highStart = highStart;\n    this.highValueIndex = highValueIndex;\n    this.index = index;\n    this.data = data;\n  }\n  /**\n   * Get the value for a code point as stored in the Trie.\n   *\n   * @param codePoint the code point\n   * @return the value\n   */\n\n\n  _createClass(Trie, [{\n    key: 'get',\n    value: function get(codePoint) {\n      var ix = void 0;\n\n      if (codePoint >= 0) {\n        if (codePoint < 0x0d800 || codePoint > 0x0dbff && codePoint <= 0x0ffff) {\n          // Ordinary BMP code point, excluding leading surrogates.\n          // BMP uses a single level lookup.  BMP index starts at offset 0 in the Trie2 index.\n          // 16 bit data is stored in the index array itself.\n          ix = this.index[codePoint >> UTRIE2_SHIFT_2];\n          ix = (ix << UTRIE2_INDEX_SHIFT) + (codePoint & UTRIE2_DATA_MASK);\n          return this.data[ix];\n        }\n\n        if (codePoint <= 0xffff) {\n          // Lead Surrogate Code Point.  A Separate index section is stored for\n          // lead surrogate code units and code points.\n          //   The main index has the code unit data.\n          //   For this function, we need the code point data.\n          // Note: this expression could be refactored for slightly improved efficiency, but\n          //       surrogate code points will be so rare in practice that it's not worth it.\n          ix = this.index[UTRIE2_LSCP_INDEX_2_OFFSET + (codePoint - 0xd800 >> UTRIE2_SHIFT_2)];\n          ix = (ix << UTRIE2_INDEX_SHIFT) + (codePoint & UTRIE2_DATA_MASK);\n          return this.data[ix];\n        }\n\n        if (codePoint < this.highStart) {\n          // Supplemental code point, use two-level lookup.\n          ix = UTRIE2_INDEX_1_OFFSET - UTRIE2_OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> UTRIE2_SHIFT_1);\n          ix = this.index[ix];\n          ix += codePoint >> UTRIE2_SHIFT_2 & UTRIE2_INDEX_2_MASK;\n          ix = this.index[ix];\n          ix = (ix << UTRIE2_INDEX_SHIFT) + (codePoint & UTRIE2_DATA_MASK);\n          return this.data[ix];\n        }\n\n        if (codePoint <= 0x10ffff) {\n          return this.data[this.highValueIndex];\n        }\n      } // Fall through.  The code point is outside of the legal range of 0..0x10ffff.\n\n\n      return this.errorValue;\n    }\n  }]);\n\n  return Trie;\n}();","map":{"version":3,"sources":["/Users/ChathushkaRodrigo/Desktop/ITP Project/ZooMelaka-Management-System/frontend/node_modules/react-to-pdf/node_modules/css-line-break/dist/Trie.js"],"names":["Object","defineProperty","exports","value","Trie","createTrieFromBase64","UTRIE2_INDEX_2_MASK","UTRIE2_INDEX_2_BLOCK_LENGTH","UTRIE2_OMITTED_BMP_INDEX_1_LENGTH","UTRIE2_INDEX_1_OFFSET","UTRIE2_UTF8_2B_INDEX_2_LENGTH","UTRIE2_UTF8_2B_INDEX_2_OFFSET","UTRIE2_INDEX_2_BMP_LENGTH","UTRIE2_LSCP_INDEX_2_LENGTH","UTRIE2_DATA_MASK","UTRIE2_DATA_BLOCK_LENGTH","UTRIE2_LSCP_INDEX_2_OFFSET","UTRIE2_SHIFT_1_2","UTRIE2_INDEX_SHIFT","UTRIE2_SHIFT_1","UTRIE2_SHIFT_2","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_Util","require","_classCallCheck","instance","TypeError","base64","buffer","decode","view32","Array","isArray","polyUint32Array","Uint32Array","view16","polyUint16Array","Uint16Array","headerLength","index","slice","data","Math","ceil","initialValue","errorValue","highStart","highValueIndex","get","codePoint","ix"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.Trie = exports.createTrieFromBase64 = exports.UTRIE2_INDEX_2_MASK = exports.UTRIE2_INDEX_2_BLOCK_LENGTH = exports.UTRIE2_OMITTED_BMP_INDEX_1_LENGTH = exports.UTRIE2_INDEX_1_OFFSET = exports.UTRIE2_UTF8_2B_INDEX_2_LENGTH = exports.UTRIE2_UTF8_2B_INDEX_2_OFFSET = exports.UTRIE2_INDEX_2_BMP_LENGTH = exports.UTRIE2_LSCP_INDEX_2_LENGTH = exports.UTRIE2_DATA_MASK = exports.UTRIE2_DATA_BLOCK_LENGTH = exports.UTRIE2_LSCP_INDEX_2_OFFSET = exports.UTRIE2_SHIFT_1_2 = exports.UTRIE2_INDEX_SHIFT = exports.UTRIE2_SHIFT_1 = exports.UTRIE2_SHIFT_2 = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Util = require('./Util');\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/** Shift size for getting the index-2 table offset. */\nvar UTRIE2_SHIFT_2 = exports.UTRIE2_SHIFT_2 = 5;\n\n/** Shift size for getting the index-1 table offset. */\nvar UTRIE2_SHIFT_1 = exports.UTRIE2_SHIFT_1 = 6 + 5;\n\n/**\n * Shift size for shifting left the index array values.\n * Increases possible data size with 16-bit index values at the cost\n * of compactability.\n * This requires data blocks to be aligned by UTRIE2_DATA_GRANULARITY.\n */\nvar UTRIE2_INDEX_SHIFT = exports.UTRIE2_INDEX_SHIFT = 2;\n\n/**\n * Difference between the two shift sizes,\n * for getting an index-1 offset from an index-2 offset. 6=11-5\n */\nvar UTRIE2_SHIFT_1_2 = exports.UTRIE2_SHIFT_1_2 = UTRIE2_SHIFT_1 - UTRIE2_SHIFT_2;\n\n/**\n * The part of the index-2 table for U+D800..U+DBFF stores values for\n * lead surrogate code _units_ not code _points_.\n * Values for lead surrogate code _points_ are indexed with this portion of the table.\n * Length=32=0x20=0x400>>UTRIE2_SHIFT_2. (There are 1024=0x400 lead surrogates.)\n */\nvar UTRIE2_LSCP_INDEX_2_OFFSET = exports.UTRIE2_LSCP_INDEX_2_OFFSET = 0x10000 >> UTRIE2_SHIFT_2;\n\n/** Number of entries in a data block. 32=0x20 */\nvar UTRIE2_DATA_BLOCK_LENGTH = exports.UTRIE2_DATA_BLOCK_LENGTH = 1 << UTRIE2_SHIFT_2;\n/** Mask for getting the lower bits for the in-data-block offset. */\nvar UTRIE2_DATA_MASK = exports.UTRIE2_DATA_MASK = UTRIE2_DATA_BLOCK_LENGTH - 1;\n\nvar UTRIE2_LSCP_INDEX_2_LENGTH = exports.UTRIE2_LSCP_INDEX_2_LENGTH = 0x400 >> UTRIE2_SHIFT_2;\n/** Count the lengths of both BMP pieces. 2080=0x820 */\nvar UTRIE2_INDEX_2_BMP_LENGTH = exports.UTRIE2_INDEX_2_BMP_LENGTH = UTRIE2_LSCP_INDEX_2_OFFSET + UTRIE2_LSCP_INDEX_2_LENGTH;\n/**\n * The 2-byte UTF-8 version of the index-2 table follows at offset 2080=0x820.\n * Length 32=0x20 for lead bytes C0..DF, regardless of UTRIE2_SHIFT_2.\n */\nvar UTRIE2_UTF8_2B_INDEX_2_OFFSET = exports.UTRIE2_UTF8_2B_INDEX_2_OFFSET = UTRIE2_INDEX_2_BMP_LENGTH;\nvar UTRIE2_UTF8_2B_INDEX_2_LENGTH = exports.UTRIE2_UTF8_2B_INDEX_2_LENGTH = 0x800 >> 6; /* U+0800 is the first code point after 2-byte UTF-8 */\n/**\n * The index-1 table, only used for supplementary code points, at offset 2112=0x840.\n * Variable length, for code points up to highStart, where the last single-value range starts.\n * Maximum length 512=0x200=0x100000>>UTRIE2_SHIFT_1.\n * (For 0x100000 supplementary code points U+10000..U+10ffff.)\n *\n * The part of the index-2 table for supplementary code points starts\n * after this index-1 table.\n *\n * Both the index-1 table and the following part of the index-2 table\n * are omitted completely if there is only BMP data.\n */\nvar UTRIE2_INDEX_1_OFFSET = exports.UTRIE2_INDEX_1_OFFSET = UTRIE2_UTF8_2B_INDEX_2_OFFSET + UTRIE2_UTF8_2B_INDEX_2_LENGTH;\n\n/**\n * Number of index-1 entries for the BMP. 32=0x20\n * This part of the index-1 table is omitted from the serialized form.\n */\nvar UTRIE2_OMITTED_BMP_INDEX_1_LENGTH = exports.UTRIE2_OMITTED_BMP_INDEX_1_LENGTH = 0x10000 >> UTRIE2_SHIFT_1;\n\n/** Number of entries in an index-2 block. 64=0x40 */\nvar UTRIE2_INDEX_2_BLOCK_LENGTH = exports.UTRIE2_INDEX_2_BLOCK_LENGTH = 1 << UTRIE2_SHIFT_1_2;\n/** Mask for getting the lower bits for the in-index-2-block offset. */\nvar UTRIE2_INDEX_2_MASK = exports.UTRIE2_INDEX_2_MASK = UTRIE2_INDEX_2_BLOCK_LENGTH - 1;\n\nvar createTrieFromBase64 = exports.createTrieFromBase64 = function createTrieFromBase64(base64) {\n    var buffer = (0, _Util.decode)(base64);\n    var view32 = Array.isArray(buffer) ? (0, _Util.polyUint32Array)(buffer) : new Uint32Array(buffer);\n    var view16 = Array.isArray(buffer) ? (0, _Util.polyUint16Array)(buffer) : new Uint16Array(buffer);\n    var headerLength = 24;\n\n    var index = view16.slice(headerLength / 2, view32[4] / 2);\n    var data = view32[5] === 2 ? view16.slice((headerLength + view32[4]) / 2) : view32.slice(Math.ceil((headerLength + view32[4]) / 4));\n\n    return new Trie(view32[0], view32[1], view32[2], view32[3], index, data);\n};\n\nvar Trie = exports.Trie = function () {\n    function Trie(initialValue, errorValue, highStart, highValueIndex, index, data) {\n        _classCallCheck(this, Trie);\n\n        this.initialValue = initialValue;\n        this.errorValue = errorValue;\n        this.highStart = highStart;\n        this.highValueIndex = highValueIndex;\n        this.index = index;\n        this.data = data;\n    }\n\n    /**\n     * Get the value for a code point as stored in the Trie.\n     *\n     * @param codePoint the code point\n     * @return the value\n     */\n\n\n    _createClass(Trie, [{\n        key: 'get',\n        value: function get(codePoint) {\n            var ix = void 0;\n            if (codePoint >= 0) {\n                if (codePoint < 0x0d800 || codePoint > 0x0dbff && codePoint <= 0x0ffff) {\n                    // Ordinary BMP code point, excluding leading surrogates.\n                    // BMP uses a single level lookup.  BMP index starts at offset 0 in the Trie2 index.\n                    // 16 bit data is stored in the index array itself.\n                    ix = this.index[codePoint >> UTRIE2_SHIFT_2];\n                    ix = (ix << UTRIE2_INDEX_SHIFT) + (codePoint & UTRIE2_DATA_MASK);\n                    return this.data[ix];\n                }\n\n                if (codePoint <= 0xffff) {\n                    // Lead Surrogate Code Point.  A Separate index section is stored for\n                    // lead surrogate code units and code points.\n                    //   The main index has the code unit data.\n                    //   For this function, we need the code point data.\n                    // Note: this expression could be refactored for slightly improved efficiency, but\n                    //       surrogate code points will be so rare in practice that it's not worth it.\n                    ix = this.index[UTRIE2_LSCP_INDEX_2_OFFSET + (codePoint - 0xd800 >> UTRIE2_SHIFT_2)];\n                    ix = (ix << UTRIE2_INDEX_SHIFT) + (codePoint & UTRIE2_DATA_MASK);\n                    return this.data[ix];\n                }\n\n                if (codePoint < this.highStart) {\n                    // Supplemental code point, use two-level lookup.\n                    ix = UTRIE2_INDEX_1_OFFSET - UTRIE2_OMITTED_BMP_INDEX_1_LENGTH + (codePoint >> UTRIE2_SHIFT_1);\n                    ix = this.index[ix];\n                    ix += codePoint >> UTRIE2_SHIFT_2 & UTRIE2_INDEX_2_MASK;\n                    ix = this.index[ix];\n                    ix = (ix << UTRIE2_INDEX_SHIFT) + (codePoint & UTRIE2_DATA_MASK);\n                    return this.data[ix];\n                }\n                if (codePoint <= 0x10ffff) {\n                    return this.data[this.highValueIndex];\n                }\n            }\n\n            // Fall through.  The code point is outside of the legal range of 0..0x10ffff.\n            return this.errorValue;\n        }\n    }]);\n\n    return Trie;\n}();"]},"metadata":{},"sourceType":"script"}